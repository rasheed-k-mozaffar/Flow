@inject ApplicationState State
@inject ISettingsService SettingsService

<section class="h-full w-full overflow-y-auto p-4 transition-all space-y-10">

    <div class="flex justify-between items-center">
        <div class="flex items-center gap-4">
            <button data-drawer-target="default-sidebar" data-drawer-toggle="default-sidebar"
                aria-controls="default-sidebar" data-drawer-backdrop="false" type="button"
                class="sm:hidden flex justify-center items-center p-1">
                <span class="sr-only">Open sidebar</span>
                <svg class="w-8 h-8 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                    width="24" height="24" fill="none" viewBox="0 0 24 24">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="m15 19-7-7 7-7" />
                </svg>

            </button>

            <h1 class="text-4xl font-bold text-gray-700 dark:text-gray-200">Appearance</h1>
        </div>

        <div>
            @if (settingsChanged)
            {
                <button disabled="@isMakingNetworkRequest" @onclick="SyncSettingsAsync"
                    class="text-sm font-medium cursor-pointer @State.UserSettings.ColorScheme?.AccentsColor?.TextColor">
                    Sync
                </button>
            }
        </div>
    </div>

    <div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="my-2">
                <ErrorAlert ErrorMessage="@errorMessage" OnCloseClicked="(() => errorMessage = string.Empty)" />
            </div>
        }

        <h2 class="mb-3 text-md font-medium text-gray-700 dark:text-gray-200">Theme</h2>

        <div class="bg-gray-50 rounded-xl p-4 dark:bg-gray-600">
            <div class="flex items-center gap-2">
                <div class="flex flex-col gap-2 text-center">
                    <img src="/images/Light.png" @onclick="(() => SetTheme(Theme.Light))"
                        class="cursor-pointer rounded-xl max-w-[125px] @(State.UserSettings.Theme == Theme.Light ? "border-4 border-blue-700" : "border border-gray-100")" />
                    <div class="dark:text-gray-100">Light</div>
                </div>

                <div class="flex flex-col gap-2 text-center">
                    <img src="/images/Dark.png" @onclick="(() => SetTheme(Theme.Dark))"
                        class="cursor-pointer rounded-xl max-w-[125px] @(State.UserSettings.Theme == Theme.Dark ? "border-4 border-blue-700" : "border border-gray-100")" />
                    <div class="dark:text-gray-100">Dark</div>
                </div>
            </div>
        </div>
    </div>


    <div>
        <h2 class="mb-3 text-md font-medium text-gray-700 dark:text-gray-200">Color Scheme</h2>
        <div class="bg-gray-50 rounded-xl p-4 dark:bg-gray-600 max-h-80 overflow-y-auto">
            <div class="w-full space-y-2">
                @if (State.ColorSchemes is not null)
                {
                    @foreach (var scheme in State.ColorSchemes)
                    {
                        <ColorSchemeItem Scheme="scheme" OnClick="((selectedScheme) => SetColorScheme(selectedScheme))"
                            IsSelected="@(State.UserSettings.ColorScheme?.Name == scheme.Name)" />
                    }
                }
            </div>
        </div>
    </div>

</section>

@code {
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool settingsChanged = false;
    private bool isMakingNetworkRequest = false;
    private UserSettingsDto? currentSettings;

    protected override void OnInitialized()
    {
        currentSettings = State.UserSettings;
    }

    private void SetTheme(Theme theme)
    {
        if (theme != currentSettings!.Theme)
            settingsChanged = true;

        State.UserSettings.Theme = theme;
        State.NotifyStateChanged();
    }

    private void SetColorScheme(ColorSchemeDto scheme)
    {
        if (scheme.Id != currentSettings!.ColorSchemeId)
            settingsChanged = true;

        State.UserSettings.ColorScheme = scheme;
        State.NotifyStateChanged();
    }

    private async Task SyncSettingsAsync()
    {
        errorMessage = string.Empty;
        isMakingNetworkRequest = true;

        try
        {
            var apiResponse = await SettingsService.UpdateSettingsAsync(State.UserSettings);

            if (apiResponse.IsSuccess)
            {
                successMessage = apiResponse.Message;
                settingsChanged = false;
            }
        }
        catch (OperationFailureException ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isMakingNetworkRequest = false;
        }
    }
}
