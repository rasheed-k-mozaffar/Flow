@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Internal
@using System.Drawing
@inject IJSRuntime JSRuntime

<canvas class="d-none" id="currentFrame" style="z-index:-1; position:absolute; top:-1000px; left:-1000px;"
    width="@width" height="@height" />

@if (Show)
{
    <!-- Extra Large Modal -->
    <div class="fixed top-0 right-0 z-50 flex h-screen w-full items-center justify-center bg-gray-200/70  backdrop-blur-sm">
    <div class="relative p-4 w-full max-w-2xl max-h-full">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-1 md:p-5 border-b rounded-t dark:border-gray-600">
                <div class="font-medium text-lg text-gray-600 dark:text-gray-100">
                    @Title
                </div>

                <button type="button" @onclick="CloseVideoStream"
                    class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
            </div>
            <!-- Modal body -->
            @if (!string.IsNullOrEmpty(frameUri))
                {
                    <img src="@frameUri" style="min-width:100%;" />
                }
                else
                {
                    <video id="videoFeed" width="2000" height="2000" />
                }

                <!-- Modal footer -->
                <div
                    class="flex justify-center items-center p-4 md:p-5 space-x-3 rtl:space-x-reverse border-t border-gray-200 rounded-b dark:border-gray-600">
                    @if (isMobile == true && string.IsNullOrEmpty(frameUri))
                    {
                        <button @onclick="ChangeCamera" type="button" class="icon-btn">
                            <svg class="w-6 h-6 text-gray-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                                viewBox="0 0 24 24">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"
                                    d="M17.7 7.7A7.1 7.1 0 0 0 5 10.8M18 4v4h-4m-7.7 8.3A7.1 7.1 0 0 0 19 13.2M6 20v-4h4" />
                            </svg>
                        </button>
                    }

                    @if (!string.IsNullOrEmpty(frameUri))
                    {
                        if (typeOfImage is ImageType.NormalImage)
                        {
                            <div class="flex space-x-4">
                                <div>
                                    <button @onclick="StartCameraFeed" class="icon-btn">
                                        <svg class="w-8 h-8 text-gray-800 dark:text-white" aria-hidden="true"
                                            xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none"
                                            viewBox="0 0 24 24">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                                                stroke-width="2" d="M21 9H8a5 5 0 0 0 0 10h9m4-10-4-4m4 4-4 4" />
                                        </svg>
                                    </button>
                                </div>

                                <div>
                                    <button @onclick="SendImageClicked" class="icon-btn">
                                        <svg class="w-8 h-8 rotate-90  text-blue-500" aria-hidden="true"
                                            xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
                                            viewBox="0 0 24 24">
                                            <path fill-rule="evenodd"
                                                d="M12 2a1 1 0 0 1 .932.638l7 18a1 1 0 0 1-1.326 1.281L13 19.517V13a1 1 0 1 0-2 0v6.517l-5.606 2.402a1 1 0 0 1-1.326-1.281l7-18A1 1 0 0 1 12 2Z"
                                                clip-rule="evenodd" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        }
                        else if (typeOfImage is ImageType.ProfilePicture)
                        {
                            <button @onclick="ImageCaptured" class="icon-btn">
                                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true"
                                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"
                                        d="m5 12 4.7 4.5 9.3-9" />
                                </svg>
                            </button>
                        }
                    }
                    else
                    {
                        <button @onclick="CaptureFrame" type="button" class="icon-btn">
                            <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true"
                                xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <path stroke="currentColor" stroke-linejoin="round" stroke-width="1.5"
                                    d="M4 18V8c0-.6.4-1 1-1h1.5l1.7-1.7c.2-.2.4-.3.7-.3h6.2c.3 0 .5.1.7.3L17.5 7H19c.6 0 1 .4 1 1v10c0 .6-.4 1-1 1H5a1 1 0 0 1-1-1Z" />
                                <path stroke="currentColor" stroke-linejoin="round" stroke-width="1.5"
                                    d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                            </svg>
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}


<br />
<br />

@code {

    [Parameter]
    public ImageType typeOfImage { get; set; }

    [Parameter] public string? Title { get; set; }
    [Parameter] public EventCallback<string> OnCapture { get; set; }
    [Parameter] public EventCallback OnCloseClicked { get; set; }
    [Parameter] public EventCallback<string> OnSendImageClicked { get; set; }
    [Parameter] public bool Show { get; set; }
    public int width = 1280;
    public int height = 720;

    private string frameUri = string.Empty;
    public bool isMobile = false;
    public bool RearCamera = true;

    protected override async Task OnParametersSetAsync()
    {
        await StartCameraFeed();
    }

    public async Task StartCameraFeed()
    {
        frameUri = string.Empty;
        isMobile = await JSRuntime.InvokeAsync<bool>("isMobile");
        await JSRuntime.InvokeVoidAsync("startVideo", "videoFeed", RearCamera);
    }
    private async Task CaptureFrame()
    {
        await JSRuntime.InvokeAsync<String>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
    }

    public async Task SendImageClicked()
    {
        await OnSendImageClicked.InvokeAsync(frameUri);
        await CloseVideoStream();
    }
    public async Task ChangeCamera()
    {
        if (string.IsNullOrEmpty(frameUri))
        {
            await JSRuntime.InvokeVoidAsync("CloseStream", "videoFeed", "currentFrame");
            StateHasChanged();
        }
        RearCamera = !RearCamera;
        await JSRuntime.InvokeVoidAsync("startVideo", "videoFeed", RearCamera);
    }
    [JSInvokable]
    public void ProcessImage(string imageString)
    {
        frameUri = imageString;
    }

    private async Task ImageCaptured()
    {
        await OnCapture.InvokeAsync(frameUri);
        await CloseVideoStream();
    }

    public async Task CloseVideoStream()
    {
        if (string.IsNullOrEmpty(frameUri))
        {
            await JSRuntime.InvokeVoidAsync("CloseStream", "videoFeed", "currentFrame");
            frameUri = string.Empty;
            StateHasChanged();
        }
        await OnCloseClicked.InvokeAsync();
    }
}