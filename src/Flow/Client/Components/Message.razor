<div class="flex z-30 @(Sent ? "justify-start" : "flex-row-reverse space-x-reverse")  space-x-2 items-center">
    @if (MessageModel.Type is MessageType.Text)
    {
        <div @onclick="MessageClicked" class="w-fit min-w-[50px] max-w-[75%] text-wrap px-4 py-2 rounded-3xl @BackgroundColor  @(Sent && !IsSelected ? $"text-white" : "text-gray-600 text-end")
            @(IsSelected && Sent ? "bg-red-500 text-gray-800 translate-x-4" : null) transition-all">
            <div>@MessageModel.Content</div>
        </div>
    }
    else if (MessageModel.Type is MessageType.Image)
    {
        <div @onclick="MessageClicked">
            <img class="rounded-xl max-w-[500px] max-h-[500px] transition-all @(IsSelected && Sent ? "border-2 border-red-500 translate-x-4" : null)"
                src="@MessageModel.Content" />
        </div>
    }

    <div class="text-xs text-gray-500 dark:text-gray-200 transition-all @(IsSelected ? "translate-x-4" : null)">
        @MessageModel.SentOn.ToLocalTime().ToShortTimeString()
    </div>
</div>

@code {
    [Parameter] public string? BackgroundColor { get; set; } = "bg-blue-600";
    [Parameter] public bool IsSelected { get; set; } = false;
    [Parameter] public MessageDto MessageModel { get; set; } = null!;
    [Parameter] public EventCallback OnMessageSelected { get; set; }
    [Parameter] public EventCallback OnMessageUnSelected { get; set; }
    [Parameter] public bool Sent { get; set; }

    private void MessageClicked()
    {
        if (Sent)
        {
            IsSelected = !IsSelected;

            if (IsSelected)
            {
                OnMessageSelected.InvokeAsync();
            }
            else
            {
                OnMessageUnSelected.InvokeAsync();
            }
        }
    }
}
