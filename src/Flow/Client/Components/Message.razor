<div @attributes="AdditionalAttributes"
    class="flex z-30 @(Sent ? "justify-start" : "flex-row-reverse space-x-reverse")  space-x-2 items-center">
    @if (Sent)
    {
        if (MessageModel.Status is MessageStatus.Sending)
        {
            <div>
                <svg class="w-4 h-4 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                    width="24" height="24" fill="none" viewBox="0 0 24 24">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M12 8v4l3 3m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>
            </div>
        }
        else if (MessageModel.Status is MessageStatus.Delivered)
        {
            <div>
                <svg class="w-4 h-4 text-gray-600 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                    width="24" height="24" fill="none" viewBox="0 0 24 24">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M5 11.917 9.724 16.5 19 7.5" />
                </svg>
            </div>
        }
    }

    @if (MessageModel.Type is MessageType.Text)
    {
        <div @onclick="MessageClicked" class="w-fit min-w-[50px] max-w-[75%] text-wrap px-4 py-2 rounded-3xl @BackgroundColor  @(Sent && !IsSelected ? $"text-white" : "text-gray-600 text-end")
            @(IsSelected && Sent ? "bg-red-500 text-gray-800 translate-x-4" : null) transition-all">
            <div>@MessageModel.Content</div>
        </div>


        <div class="text-xs text-gray-500 dark:text-gray-200 transition-all @(IsSelected ? "translate-x-4" : null)">
            @MessageModel.SentOn.ToLocalTime().ToString("h:mm tt").ToUpper()
        </div>
    }
    else if (MessageModel.Type is MessageType.Image)
    {
        <div class="flex-col space-y-2 @(Sent ? null : "text-end")">
            <div class="flex items-center space-x-2 @(Sent ? "justify-start" : "flex-row-reverse space-x-reverse")">
                <img @onclick="MessageClicked"
                    class="rounded-xl max-w-[350px] max-h-[350px] md:max-w-[500px] md:max-h-[500px] transition-all @(IsSelected && Sent ? "border-2 border-red-500 translate-x-4" : null)"
                    src="@MessageModel.Content" />

                <div>
                    <button @onclick="OpenImageClicked"
                        class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-all @(IsSelected ? "translate-x-4" : null)">
                        <svg class="w-6 h-6 text-gray-600 dark:text-gray-200" aria-hidden="true"
                            xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"
                                d="M8 4H4m0 0v4m0-4 5 5m7-5h4m0 0v4m0-4-5 5M8 20H4m0 0v-4m0 4 5-5m7 5h4m0 0v-4m0 4-5-5" />
                        </svg>
                    </button>
                </div>
            </div>

            <div class="text-xs text-gray-500 dark:text-gray-200 transition-all @(IsSelected ? "translate-x-4" : null)">
                @MessageModel.SentOn.ToLocalTime().ToString("h:mm tt").ToUpper()
            </div>
        </div>
    }
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter] public string? BackgroundColor { get; set; } = "bg-blue-600";
    [Parameter] public bool IsSelected { get; set; } = false;
    [Parameter] public MessageDto MessageModel { get; set; } = null!;
    [Parameter] public EventCallback OnMessageSelected { get; set; }
    [Parameter] public EventCallback OnMessageUnSelected { get; set; }
    [Parameter] public bool Sent { get; set; }
    [Parameter] public EventCallback<MessageDto> OnOpenImageClicked { get; set; }

    private void MessageClicked()
    {
        if (Sent)
        {
            IsSelected = !IsSelected;

            if (IsSelected)
            {
                OnMessageSelected.InvokeAsync();
            }
            else
            {
                OnMessageUnSelected.InvokeAsync();
            }
        }
    }

    private void OpenImageClicked()
    {
        OnOpenImageClicked.InvokeAsync(MessageModel);
    }
}
