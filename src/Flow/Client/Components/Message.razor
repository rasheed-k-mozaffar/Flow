<div class="flex justify-start space-x-2 @(Sent ? null : "flex-row-reverse") items-center">
    @if (IsSelected)
    {
        <Animate Animation="@(Sent ? Animations.FadeRight : Animations.FadeLeft)" Duration="TimeSpan.FromMilliseconds(250)"
            @ref="onSelectAnimation">
            <svg class="w-6 h-6 text-green-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor"
                viewBox="0 0 24 24">
                <path fill-rule="evenodd"
                    d="M2 12a10 10 0 1 1 20 0 10 10 0 0 1-20 0Zm13.7-1.3a1 1 0 0 0-1.4-1.4L11 12.6l-1.8-1.8a1 1 0 0 0-1.4 1.4l2.5 2.5c.4.4 1 .4 1.4 0l4-4Z"
                    clip-rule="evenodd" />
            </svg>
        </Animate>
    }
    <div @onclick="MessageClicked"
        class="w-fit gap-5 max-w-[75%] flex justify-between items-end px-4 py-2 rounded-3xl @(Sent ? "bg-blue-400 text-white" : "bg-gray-100 text-gray-600")">
        <div>@MessageModel.Content</div>
        <div class="text-xs">@MessageModel.SentOn.ToLocalTime().ToShortTimeString()</div>
    </div>
</div>

@code {
    private Animate? onSelectAnimation = new();
    public bool IsSelected { get; set; } = false;
    [Parameter] public MessageDto MessageModel { get; set; } = null!;
    [Parameter] public EventCallback OnMessageSelected { get; set; }
    [Parameter] public bool Sent { get; set; }

    private void MessageClicked()
    {
        onSelectAnimation?.Run();
        IsSelected = !IsSelected;
        OnMessageSelected.InvokeAsync();
    }
}
