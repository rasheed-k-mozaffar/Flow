@inject ISettingsService SettingsService
@inject ApplicationState AppState
@inject AuthenticationStateProvider AuthStateProvider
@inject IJwtsManager JwtsManager
@inject NavigationManager Nav
<div
    class="fixed z-[10000] bg-white dark:bg-gray-800 h-screen w-screen flex justify-center items-center space-y-4 flex-col">
    <div>
        <img src="/images/flow-logo.png" class="max-w-[75px] max-h-[75px]" alt="Flow's Logo" />
    </div>
    <div class="font-medium text-black text-2xl">Flow</div>

    <div>
        <div class="loader">
        </div>
    </div>
</div>



@code {
    [Parameter] public EventCallback OnSettingsLoaded { get; set; }
    private AuthenticationState? _authState;

    private string _errorMessage = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        string? jwtString = await JwtsManager.GetJwtAsync();

        if (!string.IsNullOrEmpty(jwtString))
        {
            bool isUserTokenValid = JwtsManager.JwtIsStillValid(jwtString);

            if (!isUserTokenValid)
            {
                await JwtsManager.RemoveJwtAsync();
                Nav.NavigateTo("/auth/signin", forceLoad: true);
                return;
            }
        }

        var settingsTask = LoadUserSettingsAsync();
        var colorSchemeTask = LoadColorSchemesAsync();
        var authStateTask = AuthStateProvider.GetAuthenticationStateAsync();

        await Task.WhenAll(authStateTask, settingsTask, colorSchemeTask);

        // * Set the current USER ID in App State
        if (AppState.Threads.Any())
        {
            AppState.CurrentUserId = _authState?.User.FindFirst(ClaimTypes.NameIdentifier)!.Value;
        }
        await OnSettingsLoaded.InvokeAsync();
    }

    private async Task LoadUserSettingsAsync()
    {
        byte retryCount = 0;

        // try loading the settings, if the loading failes, a retry is made until it's been made 3 times
        do
        {
            try
            {
                if (retryCount == 4)
                {
                    _errorMessage = "Something unusual happened, please refresh the page";
                    return;
                }

                var apiResponse = await SettingsService.GetUserSettingsAsync();

                if (apiResponse.IsSuccess)
                {
                    AppState.UserSettings = apiResponse.Body!;
                    return;
                }
            }
            catch (ApiGetRequestFailedException ex)
            {
                _errorMessage = ex.Message;
                retryCount++;
            }
        }
        while (retryCount <= 3);
    }

    private async Task LoadColorSchemesAsync()
    {
        var apiResponse = await SettingsService.GetColorSchemesAsync();

        if (apiResponse.IsSuccess)
        {
            AppState.ColorSchemes = apiResponse.Body!;
        }
    }
}