@inject ISettingsService SettingsService
@inject ApplicationState AppState
@inject IThreadsService ThreadsService

<div
    class="fixed z-[10000] bg-white dark:bg-gray-800 h-screen w-screen flex justify-center items-center space-y-4 flex-col">
    <div>
        <img src="/images/flow-logo.png" class="max-w-[75px] max-h-[75px]" alt="Flow's Logo" />
    </div>
    <div class="font-medium text-black text-2xl">Flow</div>

    <div>
        <div class="loader">
        </div>
    </div>
</div>



@code {
    [Parameter] public EventCallback OnSettingsLoaded { get; set; }

    private string _errorMessage = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        var settingsTask = LoadUserSettingsAsync();
        var threadsTask = LoadThreadsAndMessagesAsync();
        var colorSchemeTask = LoadColorSchemesAsync();

        await Task.WhenAll(settingsTask, threadsTask, colorSchemeTask);

        // * set the selected thread to the most recent thread
        if (AppState.Threads is not null && AppState.Threads.Any())
        {
            AppState.SelectedThreadId = AppState.Threads.First().Key;
            AppState.SelectedThread = AppState.Threads.First().Value.Contact;
        }
        await OnSettingsLoaded.InvokeAsync();
    }

    private async Task LoadUserSettingsAsync()
    {
        byte retryCount = 0;

        // try loading the settings, if the loading failes, a retry is made until it's been made 3 times
        do
        {
            try
            {
                if (retryCount == 4)
                {
                    _errorMessage = "Something unusual happened, please refresh the page";
                    return;
                }

                var apiResponse = await SettingsService.GetUserSettingsAsync();

                if (apiResponse.IsSuccess)
                {
                    AppState.UserSettings = apiResponse.Body!;
                    return;
                }
            }
            catch (ApiGetRequestFailedException ex)
            {
                _errorMessage = ex.Message;
                retryCount++;
            }
        }
        while (retryCount <= 3);
    }

    private async Task LoadThreadsAndMessagesAsync()
    {
        var apiResponse = await ThreadsService.GetChatsAsync();

        if (apiResponse.IsSuccess)
        {
            AppState.Threads = apiResponse.Body!
            .OrderByDescending(kv => kv.Value.Messages.Any() ? kv.Value.Messages?.Max(m => m.SentOn) : DateTime.MinValue)
            .ToDictionary(kv => kv.Key, kv => kv.Value);
        }
    }

    private async Task LoadColorSchemesAsync()
    {
        var apiResponse = await SettingsService.GetColorSchemesAsync();

        if (apiResponse.IsSuccess)
        {
            AppState.ColorSchemes = apiResponse.Body!;
        }
    }
}