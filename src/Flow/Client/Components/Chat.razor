@inject NavigationManager Nav
@inject ApplicationState State

<div data-drawer-target="default-sidebar" data-drawer-hide="default-sidebar" aria-controls="default-sidebar"
    data-drawer-backdrop="false" @onclick="ChatClicked"
    class="flex justify-between items-center p-2 cursor-pointer transition-all  border-b border-gray-100 dark:border-gray-700 @(State.SelectedThread?.UserId == ContactModel.UserId ? $"{State.UserSettings.ColorScheme?.AccentsColor?.BgColor} text-white" : "bg-white text-gray-600 dark:bg-gray-600 dark:text-gray-100" ) lg:flex-row lg:min-w-full md:flex-row md:max-w-xl">
    <div class="flex items-center gap-4">
        <div>
            <img class="h-[50px] w-[50px] rounded-full object-cover"
                src="@(ContactModel.ProfilePictureUrl ?? "/images/avatar.png")" alt="@ContactModel.Name" />
        </div>

        <div class="font-medium dark:text-white">
            <div class="font-light">@ContactModel.Name</div>
            @if (latestMessage is not null)
            {
                <div class="text-sm font-light">
                    @if (latestMessage?.SenderId ==
                   ContactModel.UserId)
                    {
                        if (latestMessage?.Type is MessageType.Image)
                        {
                            <span>@ContactModel.Name!.Split(' ')[0]: Sent an image</span>
                        }
                        else
                        {
                            if (latestMessage?.Content.Length <= 15)
                            {
                                <span>@ContactModel.Name!.Split(' ')[0]:
                                    @latestMessage?.Content</span>
                            }
                            else
                            {
                                <span>@ContactModel.Name!.Split(' ')[0]:
                                    @latestMessage?.Content.Substring(0, 15)...</span>
                            }
                        }
                    }
                    else if (latestMessage == null)
                    {

                    }
                    else
                    {
                        if (latestMessage?.Type is MessageType.Image)
                        {
                            <span>You: Image</span>
                        }
                        else
                        {
                            if (latestMessage?.Content.Length <= 15)
                            {
                                <span>You:
                                    @latestMessage?.Content</span>
                            }
                            else
                            {
                                <span>You:
                                    @latestMessage?.Content.Substring(0, 15)...</span>
                            }
                        }
                    }
                </div>

            }
        </div>
    </div>

    <div></div>

    <div class="text-sm font-light text-gray-400 dark:text-gray-200">
        @latestMessageTimestampOutput
    </div>
</div>

@code {
    [Parameter] public UserDetailsDto ContactModel { get; set; } = null!;
    [Parameter] public Guid ThreadId { get; set; }
    private MessageDto? latestMessage;
    private string? latestMessageTimestampOutput;

    protected override void OnInitialized()
    {
        latestMessage = State.Threads[ThreadId].Messages.LastOrDefault();

        if (latestMessage is not null)
        {
            latestMessageTimestampOutput = FormatLatestMessageTimestampOutput(latestMessage.SentOn);
        }
        State.OnChange += StateHasChanged;
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        latestMessage = State.Threads[ThreadId].Messages.LastOrDefault();

        if (latestMessage is not null)
        {
            latestMessageTimestampOutput = FormatLatestMessageTimestampOutput(latestMessage.SentOn);
        }
    }
    private void ChatClicked()
    {
        State.SelectedThreadId = ThreadId;
        State.SelectedThread = ContactModel;
        State.NotifyStateChanged();
        Console.WriteLine($"The current thread id: {ThreadId}");
    }

    private string FormatLatestMessageTimestampOutput(DateTime timestamp)
    {
        DateTime today = DateTime.Now.Date;
        DateTime messageDate = timestamp.Date;

        int daysDiff = (today - messageDate).Days;

        return daysDiff switch
        {
            0 => timestamp.ToLocalTime().ToString("h:mm tt").ToUpper(), // * the message was sent today
            1 => "Yesterday", // * message sent yesterday,
            <= 7 => "Last week", // * mesasage sent during last week
            _ => timestamp.ToString("dd/MM/yyyy") // * message sent more than a week ago
        };
    }
}
