@if (DisplayToast)
{
    <div class="absolute right-2 z-[9999] top-1 flex items-center w-full max-w-md p-4 mb-4 text-white bg-red-500 rounded-lg shadow"
    role="alert">
    <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-red-500 bg-red-100 rounded-lg ">
        <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor"
            viewBox="0 0 20 20">
            <path
                d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z" />
        </svg>
        <span class="sr-only">Error icon</span>
    </div>
    <div class="ms-3 text-sm font-normal">@Message</div>
    <button type="button" @onclick="CloseClicked"
        class="ms-auto -mx-1.5 -my-1.5 bg-red-500 text-white hover:text-gray-100 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-red-400 inline-flex items-center justify-center h-8 w-8 "
        data-dismiss-target="#toast-danger" aria-label="Close">
        <span class="sr-only">Close</span>
        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
        </svg>
    </button>
</div>
}

@code {
    [Parameter] public bool DisplayToast { get; set; }
    [Parameter] public string? Message { get; set; }
    [Parameter] public EventCallback OnCloseClicked { get; set; }
    [Parameter] public EventCallback TimerElapsed { get; set; }
    [Parameter] public TimeSpan DisplayFor { get; set; }

    private Timer? timer;

    private void CloseClicked()
    {
        OnCloseClicked.InvokeAsync();
    }

    protected override void OnParametersSet()
    {
        if (DisplayToast)
        {
            timer = new Timer(OnTimerElapsed!, null, DisplayFor, TimeSpan.Zero);
        }
    }

    private void OnTimerElapsed(object state)
    {
        DisplayToast = false;

        TimerElapsed.InvokeAsync();

        InvokeAsync(StateHasChanged);
    }
}
